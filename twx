#!/bin/bash

#  TWX CLI - Unofficial ThingWorx command line utilities
#  Copyright (c) 2023 Geoffrey Espagne
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

###########################################################################
################################ VARIABLES ################################
###########################################################################
exit_code=0
output=""
http_option="--silent"
zip_option="-rq"
version="1.0.1"


###########################################################################
############################## HELPER FUNCTIONS ###########################
###########################################################################

create_json_body() {

    local json_body="{"
    for key in "${!options[@]}"; do
        if jq -e . >/dev/null 2>&1 <<<"${options[$key]}"; then
            json_body+="\"$key\":${options[$key]},"
        else
            echo
            json_body+="\"$key\":\"${options[$key]}\","
        fi
    done
    json_body="${json_body%,}"
    json_body+="}"
    echo "$json_body"
}

# Set verbose mode
set_verbose() {
    if [ "$1" = 1 ]; then
        is_verbose=true
        http_option="--verbose"
        zip_option="-rv"
    else
        is_verbose=false
        http_option="--silent"
        zip_option="-rq"
    fi
}

# Check for required tools
check_mandatory_tools() {
    local exit_code=0
    local error_exit_code=1

    # mention in readme all the mandatory tools + link to get them/install + clarify why.where its neeedd
    local tools=("curl" "zip" "unzip" "jq")
    local not_installed_tools=()

    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            not_installed_tools+=("$tool")
        fi
    done

    if [ ${#not_installed_tools[@]} -gt 0 ]; then
        echo "Error: The following tools are missing:"
        for tool in "${not_installed_tools[@]}"; do
            echo "  - $tool"
        done
        exit_code=$error_exit_code
    fi

    return ${exit_code}
}

# Check for enviroment variables
check_configuration() {
    local exit_code=0
    local error_exit_code=2

    if [ -n "$TWX_APPKEY" ] && [ -n "$TWX_URL" ]; then
        echo "Continuing..."
    else
        if [ -f ./.thingworx.conf ]; then
            source ./.thingworx.conf
        elif [ -f ~/.thingworx.conf ]; then
            source ~/.thingworx.conf
        else 
            echo "Error: No configuration file detected."
            exit $error_exit_code
        fi

        if [ -z "$TWX_APPKEY" ]; then
            echo "Error: TWX_APPKEY variable is empty. Set TWX_APPKEY variable in ~/.thingworx.conf file."
            exit $error_exit_code
        fi

        if [ -z "$TWX_URL" ]; then
            echo "Error: TWX_URL variable is empty. Set TWX_URL variable in ~/.thingworx.conf file."
            exit $error_exit_code
        fi
    fi

    return ${exit_code} 
}

###########################################################################
################################ FUNCTIONS ################################
###########################################################################

import() {
    local input_name="$1"
    local exit_code=0
    local error_exit_code=3

    if [ -d "$input_name" ]; then
        # If input is a directory, create a temporary zip file
        local tmp_zip="$(mktemp -u).zip"
        local zip_name="$(basename "$tmp_zip" | sed 's/^tmp\.//' | sed 's/\.zip$//')"
        local tmp_zip="$zip_name.zip"

        zip "$zip_option" "$tmp_zip" "$input_name"

        local folder_name="tmp-${zip_name}"

        upload_result=$(upload_file "SystemRepository/$zip_name" "$tmp_zip")
        exit_code=$?

        rm "$tmp_zip"

        if [ $exit_code -eq 6 ]; then
            echo "Couldn't upload $tmp_zip,"
            exit "$exit_code" 
        fi

        #Extract zip
        local extract_zip=$(call_service "Things/SystemRepository/ExtractZipArchive" "-ppath=$folder_name" "-pzipFileName=${zip_name}/${tmp_zip}")
        exit_code=$?

        if [ $exit_code -eq 5 ]; then
            echo "Couldn't extract $input_name,"
            echo "$extract_zip"
            exit "$exit_code"
        fi

        #Import entities
        import_xml=$(call_service "Resources/SourceControlFunctions/ImportSourceControlledEntities" "-ppath=$folder_name" "-prepositoryName=SystemRepository")
        exit_code=$?

        if [ $exit_code -eq 5 ]; then
            echo "Couldn't import $input_name, response $import_xml\n"
        fi

        #Delete folders
        call_service "Things/SystemRepository/DeleteFolder" "-ppath=$zip_name" >/dev/null
        call_service "Things/SystemRepository/DeleteFolder" "-ppath=$folder_name" >/dev/null

        if [ $exit_code -eq 0 ]; then
            echo "Success"
        fi

    else
        #Import single entity
        local url="$TWX_URL/Importer?purpose=import"

        local http_code_response=$(
            curl -X POST "$http_option" -F "file=@$input_name" \
                -H "appKey:$TWX_APPKEY" \
                -H "Accept: text/xml" \
                -H "X-XSRF-TOKEN:TWX-XSRF-TOKEN-VALUE" \
                -w 'HTTPSTATUS:%{http_code}' "$url"
        )

        local http_status=$(echo "$http_code_response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

        if [ "$http_status" -eq 200 ]; then
            if [ "$is_verbose" = true ]; then
                echo "Import success, http code ${http_status}"
            else
                echo "Success"
            fi
        else
            echo "Couldn't import $input_name, http code ${http_status}"
            exit_code=2
        fi
    fi

    return ${exit_code}
}

import_ext() {
    local exit_code=0
    local error_exit_code=4
    local restart_exit_code=9

    local input_params="$1"
    local url="$TWX_URL/ExtensionPackageUploader?purpose=import&validate=false"

    local http_status=$(
        curl -X POST "$http_option" -o "response-import-ext.json" -w '%{http_code}' -F "file=@$input_params" \
            -H "appKey:$TWX_APPKEY" \
            -H "X-XSRF-TOKEN:TWX-XSRF-TOKEN-VALUE" "$url"
    )

    local http_response=$(cat response-import-ext.json)
    rm -r "response-import-ext.json"

    if [ "$http_status" -eq 200 ]; then
        local validate_report_status=$(echo "$http_response" | jq -r '.rows[1].install.rows[0].extensionReportStatus')

        if [ "$validate_report_status" == "2" ]; then
            # case same version already installed
            echo $(echo "$http_response" | jq -r '.rows[1].install.rows[0].reportMessage')
        else
            # case install success
            echo "Success"
        fi
    elif [ "$http_status" -eq 406 ]; then
        if [[ "$http_response" == "Not Acceptable" ]]; then
            # case extension malformed
            echo "Error: Import extension failed. Not Acceptable."
            exit_code=$error_exit_code
        else
            local validate_report_status=$(echo "$http_response" | jq -r '.rows[0].validate.rows[0].extensionReportStatus')

            if [ "$validate_report_status" == "1" ]; then
                # case newer version already installed
                echo $(echo "$http_response" | jq -r '.rows[0].validate.rows[0].reportMessage')
                exit_code=$error_exit_code
            elif [ "$validate_report_status" == "0" ] || [ "$validate_report_status" == "2" ]; then
                # case ext need server restart. 0 is minor or patch version change. 2 is major version change.
                echo $(echo "$http_response" | jq -r '.rows[1].install.rows[0].reportMessage')
                exit_code=$restart_exit_code
            else
                # default case
                echo "Error: Couldn't import extension $input_params, unknown error."
                exit_code=$error_exit_code
            fi
        fi     
    elif [ "$http_status" -eq 401 ]; then
        echo "Error: Couldn't import extension $input_params, can't connect to server."
        exit_code=$error_exit_code
    elif [ "$http_status" -eq 000 ]; then
        echo "Error: Couldn't import extension $input_params, server offline."
        exit_code=$error_exit_code
    else
        echo "Error: Couldn't import extension $input_params, unknown error."
        exit_code=$error_exit_code
    fi

    return ${exit_code}
}

call_service() {
    local exit_code=0
    local error_exit_code=5
    local input_params="$1"
    shift

    declare -A options

    if [ $# -gt 0 ]; then
        for i in "$@"; do
            if [[ $i =~ ^-p.*= ]]; then
                SIMPLE=$(echo "$i" | tail -c +3)
                OPTION_VALUE="$(echo "$SIMPLE" | sed 's/[[:alnum:]_-]*=//')"
                OPTION_NAME="$(echo "$SIMPLE" | sed 's/=.*//')"
                options["$OPTION_NAME"]="$OPTION_VALUE"
                if [ "$is_verbose" = true ]; then
                    echo "Parameter '$OPTION_NAME' = '$OPTION_VALUE'"
                fi
            fi
        done
    fi

    local entity_type=""
    local entity_name=""
    local service_name=""

    IFS="/" read -r entity_type entity_name service_name <<<"$input_params"
    if [ "$is_verbose" = true ]; then
        echo "Will call '$TWX_URL/$entity_type/$entity_name/Services/$service_name'"
    fi

    local http_response=$(
        curl -X POST "$http_option" -o "response.json" -w '%{http_code}' "$TWX_URL/$entity_type/$entity_name/Services/$service_name" \
            -H "X-XSRF-TOKEN: TWX-XSRF-TOKEN-VALUE" -H "AppKey: $TWX_APPKEY" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d "$(create_json_body)"
    )

    local http_body=$(cat response.json)
    local http_status=$http_response
    rm -r "response.json"

    if [ "$http_status" -eq 200 ]; then
        echo "$http_body"
    else
        echo "Couldn't call $input_params, error: $http_body"
        exit_code=$error_exit_code

    fi
    return ${exit_code}
}

execute_code() {
    local exit_code=0
    local js_file_name="taken from input"
    local js_file_content=""
    local temp_file_name="$(mktemp /tmp/xml-XXXXX).xml"

    local temp_entity_name="$(basename "$temp_file_name" | sed 's/.*\///;s/\..*//')"

    if [[ $1 == -* ]]; then
        read js_file_content
    else
        js_file_content=$(cat "$1")
        js_file_name=$1
        shift
    fi

    local code=""
    if [[ "$js_file_content" =~ ^\#\! ]]; then
        code=$(echo "$js_file_content" | sed '1d')
    else
        code="$js_file_content"
    fi
    local eval_code="$code"

    declare -A options
    if [ $# -gt 0 ]; then
        for i in "$@"; do
            if [[ $i =~ ^-p.*= ]]; then
                option_name="${i%=*}"
                option_name="${option_name//-/}"
                option_name="${option_name:1}"
                service_input+="<FieldDefinition baseType=\"STRING\" description=\"\" name=\"$option_name\"/>"
            fi
        done
    fi

    local xml_template="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <Entities>
        <Things>
            <Thing enabled=\"true\" name=\"$temp_entity_name\" thingTemplate=\"GenericThing\">
                <ThingShape>
                    <ServiceDefinitions>
                    <ServiceDefinition name=\"Run\">
                        <ResultType baseType=\"INTEGER\" name=\"result\" />
                        <ParameterDefinitions>
                            $service_input
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    </ServiceDefinitions>
                    <ServiceImplementations>
                    <ServiceImplementation description=\"\" handlerName=\"Script\" name=\"Run\">
                        <ConfigurationTables>
                            <ConfigurationTable dataShapeName=\"\" description=\"\" isMultiRow=\"false\" name=\"Script\" ordinal=\"0\">
                                <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition baseType=\"STRING\" description=\"code\" name=\"code\" ordinal=\"0\" />
                                </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                <Row>
                                    <code><![CDATA[$eval_code]]></code>
                                </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    </ServiceImplementations>
                </ThingShape>
            </Thing>
        </Things>
    </Entities>"

    echo "$xml_template" >"$temp_file_name"

    import_xml=$(import "$temp_file_name")
    exit_code=$?

    rm -r "$temp_file_name"

    if [ $exit_code -eq 2 ]; then
        echo "Error importing XML with .js file $js_file_name"
    else
        PARAM_ARRAY=()
        if [ $# -eq 0 ]; then
            call_js_service=$(call_service "Things/$temp_entity_name/Run")
            exit_code=$?
        else
            for i in "$@"; do
                PARAM_ARRAY+=("$i")
            done

            call_js_service=$(call_service "Things/$temp_entity_name/Run" "${PARAM_ARRAY[@]}")
            exit_code=$?
        fi

        if [ $exit_code -ne 5 ]; then
            echo "$call_js_service"
        else
            echo "Error run .js file $js_file_name. Response: $call_js_service"
        fi
    fi

    call_service "Resources/EntityServices/DeleteThing" "-pname=$temp_entity_name" > /dev/null

    return ${exit_code}
}

build_ext() {
    local exit_code=0
    local error_exit_code=8

    if [$# -lt 3]; then 
        exit_code=$error_exit_code
        return ${exit_code}
    fi

    local ext_src_dir="$1"
    local ext_name="$2"
    local ext_version="$3"
    local ext_zip_name="$2"_"$3.zip"

    local temp_build_dir=$(mktemp -d -t tmp-build-XXXXXX)

    local metadata_template="<?xml version=\"1.0\" encoding=\"utf-8\"?>
    <Entities>
        <ExtensionPackages>
            <ExtensionPackage name=\"$ext_name\" haCompatible=\"true\" groupId=\"\" artifactId=\"\" description=\"\" vendor=\"\" packageVersion=\"$ext_version\" buildNumber=\"\" minimumThingWorxVersion=\"9.3.0\" dependsOn=\"\">
            </ExtensionPackage>
        </ExtensionPackages>
    </Entities>"

    mkdir "$temp_build_dir/Entities"
    echo "$metadata_template" > "$temp_build_dir/metadata.xml"
    cp -r "$ext_src_dir/." "$temp_build_dir/Entities/"
    pushd "$temp_build_dir"
    zip "$zip_option" "$ext_zip_name" "."
    popd
    mv "$temp_build_dir/$ext_zip_name" "."
    rm -r "$temp_build_dir"

    return ${exit_code}
}

upload_file() {
    local exit_code=0
    local error_exit_code=6

    local repo_path="$1"
    local base_filename=$(basename "$repo_path")
    local repository="${repo_path%%/*}"
    local remote_path=${repo_path#"$repository"}

    local local_file_path="$2"

    if [ -n "$local_file_path" ]; then
        if [ -f "$local_file_path" ]; then 
            if [ $is_verbose = true ]; then
                echo "$local_file_path exists."
            fi
        else 
            echo "$local_file_path does not exist."
            exit $error_exit_code
        fi
    else
        echo "Missing upload file path."
        exit $error_exit_code
    fi

    local http_status_code_upload=$(
        curl -H "X-XSRF-TOKEN: TWX-XSRF-TOKEN-VALUE" -H "AppKey: $TWX_APPKEY" \
            -F "upload-repository=$repository" \
            -F "upload-path=\"$remote_path\"" \
            -F "upload-submit=Upload" \
            -F "file=@$local_file_path;type=application/x-zip-compressed" \
            --write-out "%{http_code}" "$http_option" --output /dev/null "$TWX_URL/FileRepositoryUploader"
    )

    if [ "$http_status_code_upload" -eq 200 ]; then
        if [ $is_verbose = true ]; then
            echo "Upload success,  http code ${http_status_code_upload}"
        fi
    else
        echo "Couldn't upload $local_file_path, http code ${http_status_code_upload}"
        exit_code=$error_exit_code
    fi

    return ${exit_code}
}

download_file() {
    local exit_code=0
    local error_exit_code=7

    local file_path="$1"
    local base_filename=$(basename "$file_path")
    local full_url="$TWX_URL/FileRepositories/$1"

    local repository="${file_path%%/*}"

    local download_dir=""
    if [ -n "$2" ]; then
        if [[ -d "$2" ]]; then
            download_dir="$2"
        else
            echo "$2 is not a valid directory"
            exit $error_exit_code
        fi
    fi

    if [ $is_verbose = true ]; then
        echo "Downloading file ${base_filename}, filePath ${file_path}, download URL: ${full_url}"
        echo "Repository ${repository}"
    fi

    local http_status_code=$(
        MSYS_NO_PATHCONV=1 curl -X GET -H "X-XSRF-TOKEN: TWX-XSRF-TOKEN-VALUE" \
        -H "AppKey: $TWX_APPKEY" \
        "$full_url" \
        -s -o "$base_filename" -w "%{http_code}"
    )

    if [ "200" != "${http_status_code}" ]; then
        echo "Failed to download ${file_path}, with http code ${http_status_code}"
        rm -r "$base_filename"
        exit_code=$error_exit_code
    else
        echo $(pwd)
        if [ -n "$download_dir" ]; then
            mv -f "./$base_filename" "$download_dir"
        fi
        echo "Successfully downloaded file $file_path"
    fi

    return ${exit_code}
}

config_info() {
    echo "--- Current Thingworx configuration : "
    echo
    echo " > TWX_URL: $TWX_URL"
    echo " > TWX_APPKEY: $TWX_APPKEY"
}

version_info() {
    echo "ThingWorx CLI $version"
}

help_info() {

    echo
    echo "Usage:  twx [OPTIONS] COMMAND [PARAMS]"

    echo
    echo "Unofficial ThingWorx command line utilities

Options:
  -v        Verbose mode. Allows user to see detailed information about the 
            execution of twx commands. Note that the output may contain
            credentials and parameter values in cleartext.
    
Commands:

  import    Import an extension, a single or multiple entities
            Accepts an .xml file, a .zip file or a directory
            Ex.: twx import entity.xml  # Imports a single entity
                 twx import ext.zip     # Imports an extension
                 twx import ./Entities  # Zips and imports Source Control 
                                          entities from a directory

  call      Call a service on a ThingWorx entity. Returns exit code 5 if
            the service returns something other than HTTP 200. Echoes the 
            service response into STDOUT.
            Parameter syntax: <EntityType>/<EntityName>/ServiceName 
                              -p<ParamName>=<ParamValue>
            Ex.: twx call Resources/EntityServices/CreateThing 
                          -pname=MyThing -pthingTemplateName=GenericThing
    
  eval      Execute a JavaScript code snippet in ThingWorx
            Accepts a filename and an optional -p<ParamName>=<ParamValue>
            If no filename is provided, the script body is taken from STDIN.
            Ex.: twx eval init.js -puser=JohnDoe -ppassword=\$SECRET
                 echo 'logger.info(msg)' | twx eval -pmsg='Hello, world!'

  build     Build a ThingWorx extension as zip file with metadata
            Accepts a directory path, an extension name and a 
            version number. The zip file will be created in the current 
            folder.
            Ex.: twx build ./twx-src myExtension [1.0.8]
    
  upload    Upload a single file to a File Repository
            Parameter syntax: <FileRepository>[/<filePath>] <localFile>
            If a remote path does not exist -- it gets created recursively.
            WARNING: Existing remote files are overwritten silently.
            Ex.: twx upload SystemRepository/docs README.md
                 twx upload SystemRepository root-data.txt
    
  download  Download a single file from Thingworx repository
            Parameter syntax: <FileRepository>/<filePath> [<localDirectory>]
            WARNING: Existing local files are overwritten silently.
            Ex.: twx download ImportDataRepository/data/history.csv
                 twx download SystemRepository/README.md ~/Downloads

  config    Display current configuration (.thingworx.conf content)
            WARNING: The output includes the appkey in clear text.

  version   Display current ThingWorx CLI version
            
To get more details check out https://github.com/vilia-fr/twx-cli"
}

###############################################################################
################################ MAIN SEQUENCE ################################
###############################################################################

if [ "$1" = "-v" ]; then
    shift
    set_verbose 1
else
    set_verbose 0
fi

check_configuration
check_mandatory_tools

if [ "$1" == "import" ]; then
    if [ -d "$2" ] || [ "${2##*.}" == "xml" ]; then
        output=$(import "$2")
        exit_code=$?
    elif [ "${2##*.}" == "zip" ]; then
        output=$(import_ext "$2")
        exit_code=$?
    fi
elif [ "$1" == "call" ]; then
    shift
    output=$(call_service "$@")
    exit_code=$?
elif [ "$1" == "eval" ]; then
    shift
    output=$(execute_code "$@")
    exit_code=$?
elif [ "$1" == "build" ]; then
    shift
    output=$(build_ext "$@")
    exit_code=$?
elif [ "$1" == "upload" ]; then
    shift
    output=$(upload_file "$@")
    exit_code=$?
elif [ "$1" == "download" ]; then
    shift
    output=$(download_file "$@")
    exit_code=$?
elif [ "$1" == "config" ]; then
    config_info
elif [ "$1" == "version" ]; then
    version_info
elif [ "$#" -eq 0 ]; then
    help_info
else 
    help_info
fi

echo "$output"
exit $exit_code
